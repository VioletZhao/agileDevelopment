开放封闭原则;
        软件实体（类、模块、函数）应该是可以扩展的，但是是不可修改的

        OCP背后的主要机制是抽象和多态

        如果程序中有一处改动就会产生连锁反应，导致一系列相关模块的改变，正确应用OCP，以后再进行同样的改动时，只需添加
        新的代码，而无需改定已经正在运行的代码

        特征：1.扩展是开放的；模块行为可以进行扩展，在需求变化时
              2.更改是封闭的；不必改动模块源代码


              关键在于抽象：---描述一组任意个可能行为的抽象体，抽象基类

              模块操作一个抽象体，从抽象体派生，可以扩展模块行为

              使用开放封闭原则，是增加新代码，以及为了实例化新类型对象对main进行改动

        预测变化和贴切的结构：
                模块不可能做到完全封闭，需要程序猿对设计的模块应该对哪种变化封闭做出选择，
                必须先猜测出最可能发生变化的种类，然后构造抽象来隔离这些变化。

                创建正确的抽象

        通常是等到需要抽象时再进行抽象，避免不必要的错误


        使用抽象获得显式封闭：
                对经常变化的将其抽象出来整成抽象类，在具体去实现各种策略



        需要一一实现，写成博客



