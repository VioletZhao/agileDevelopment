单一职责原则：
        就一个类而言，应该仅有一个引起它变化的原因

        每个原则都是变化的一个轴线，当需求变化时，该变化会反应为类的职责的变化，如果一个类承担了多余一个职责，那么引起它
        变化的原因就会有很多个。

        如果一个类承担的职责过多，就等于把这些职责耦合到了一起，一个职责的变化可能会削弱或抑制这个类完成其他职责的能力。


        职责：变化的原因，如果多于一个的动机去改变一个类，这个类就具有多于一个的职责

        如果应用程序的变化方式会导致俩个职责同时变化，那么就不必分离他们，分离他们会造成不必要的复杂性臭味


        持久化：
                业务规则、持久化，业务规则属于经常变化的，持久化方式往往不会频繁变化

  发现职责并将职责相互分离