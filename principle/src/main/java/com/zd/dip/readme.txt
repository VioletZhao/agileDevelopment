依赖倒置原则（DIP）
            高层模块不应该依赖于底层模块，俩者都应该依赖于抽象
            抽象不应该依赖于细节，细节应该依赖于抽象

层次化：
    Policy Layer --------> Mechanism Layer ----------->Utility Layer
    高层的police使用底层的mechanism，mechanism又使用了更底层的utility，这样，police对于其下的层次都有依赖，一有改变，police
    也需要改变

    合理设计：每个较高层次为其所需要的服务声明一个抽象接口，较低层次实现这些接口，高层类通过抽象接口使用下一层，这样高层
               不依赖于底层，相反底层依赖于高层声明的抽象接口。

               根据上层接口来修改下层功能

                客户拥有抽象接口，服务者从接口派生

    倒置的接口所有权：
                底层模块实现了在高层模块中声明并被高层模块调用的接口

    依赖于抽象：
                程序中所有依赖关系都应该终止于抽象类或者接口

                1.任何变量都不应该持有指向一个具体类的指针或引用
                2.任何类都不应该从具体类派生
                3.任何方法都不应该覆写它的任何基类中已经实现了的方法。

                有时候一个具体类不太会改变时，而且也不会创建其他类似的派生类，那么其依赖就不会造成伤害


